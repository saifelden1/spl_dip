#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>

#define MAX_INPUT 100
#define MAX_ARGS 50

int picoshell_main(int argc, char *argv[]) {
   

    char line[MAX_INPUT]; 

    while (1) {
        printf("PicoShell > ");
        
        fgets(line, sizeof(line), stdin) 
            

        size_t len = strlen(line);
        if (len > 0 && line[len - 1] == '\n') {
            line[len - 1] = '\0';
        }

        if (strlen(line) == 0) {
            continue;
        }

        char *args[MAX_ARGS]; 
        int count = 0;        
        char *token = strtok(line, " ");

        while (token != NULL && count < MAX_ARGS - 1) {
            args[count] = strdup(token); 
            if (args[count] == NULL) {
                perror("strdup failed");
                exit(EXIT_FAILURE);
            }
            count++;
            token = strtok(NULL, " ");
        }
        args[count] = NULL; 
        if (strcmp(args[0], "exit") == 0) {
            printf("Good Bye :)\n");

        } else if (strcmp(args[0], "echo") == 0) {
            for (int i = 1; i < count; i++) {
                printf("%s ", args[i]);
            }
            printf("\n");
        } else if (strcmp(args[0], "pwd") == 0) {
            char cwd[1024];
            if (getcwd(cwd, sizeof(cwd)) != NULL) {
                printf("%s\n", cwd);
            } else {
                perror("pwd failed");
            }
        } else if (strcmp(args[0], "cd") == 0) {
            if (count < 2) {
                fprintf(stderr, "cd: missing operand\n");
            } else {
                if (chdir(args[1]) != 0) {
                    perror("cd failed");
                }
            }
        } else {
            pid_t pid = fork();
            if (pid == 0) {
                execvp(args[0], args);
                perror("exec failed");
                exit(EXIT_FAILURE);
            } else if (pid > 0) {
                int status;
                waitpid(pid, &status, 0);
            } else {
                perror("fork failed");
            }
        }

        for (int i = 0; i < count; i++) {
            free(args[i]);
        }
    }

    return 0; 
}
